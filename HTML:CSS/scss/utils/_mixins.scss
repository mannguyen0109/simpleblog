$image-path: '../img' !default;
$fallback-extension: 'png' !default;
$retina-suffix: '@2x';
@mixin background-image($name, $size:false){
	background-image: url(#{$image-path}/#{$name}.svg);
	@if($size){
		background-size: $size;
	}
	.no-svg &{
		background-image: url(#{$image-path}/#{$name}.#{$fallback-extension});

		@media only screen and (-moz-min-device-pixel-ratio: 1.5), only screen and (-o-min-device-pixel-ratio: 3/2), only screen and (-webkit-min-device-pixel-ratio: 1.5), only screen and (min-device-pixel-ratio: 1.5) {
			background-image: url(#{$image-path}/#{$name}#{$retina-suffix}.#{$fallback-extension});
		}
	}
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
     -moz-border-radius: $radius;
      -ms-border-radius: $radius;
          border-radius: $radius;
}

@mixin inline-block {
	display: inline-block;
	*display: inline;
	*zoom: 1;
}

@mixin my-font-face($font-family, $file-path, $weight: normal, $style: normal) {
	@font-face {
    	font-family: $font-family;
    	src: url('#{$file-path}.eot');
		src: url('#{$file-path}.eot?#iefix')              format('embedded-opentype'),
	    	url('#{$file-path}.woff')                     format('woff'),
	    	url('#{$file-path}.ttf')                      format('truetype'),
	    	url('#{$file-path}.svg##{$font-family}')      format('svg');
		font-weight: $weight;
    	font-style: $style;
  	}
}

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity=$opacity-ie); //IE8
}

%clearfix {
  *zoom: 1;
  &:before, &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

%visuallyhidden {
  margin: -1px;
  padding: 0;
  width: 1px;
  height: 1px;
  overflow: hidden;
  clip: rect(0 0 0 0);
  clip: rect(0, 0, 0, 0);
  position: absolute;
}